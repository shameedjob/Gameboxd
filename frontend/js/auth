import GameboxAPI from './api.js';
import { showToast, showLoading, hideLoading } from './utils.js';

// API Base URL
const API_BASE_URL = 'http://localhost:5001/api';

// DOM Elements
const userMenu = document.getElementById('user-menu');
const userDropdown = document.getElementById('user-dropdown');
const userMenuBtn = document.getElementById('user-menu-btn');
const authButtons = document.getElementById('auth-buttons');
const usernameDisplay = document.getElementById('username-display');
const userAvatar = document.getElementById('user-avatar');
const loginForm = document.getElementById('login-form');
const registerForm = document.getElementById('register-form');
const loginPage = document.getElementById('login-page');
const registerPage = document.getElementById('register-page');
const authPages = document.getElementById('auth-pages');

// Close dropdown when clicking outside
document.addEventListener('click', (event) => {
    if (!userDropdown || !userMenuBtn) return;
    
    if (userDropdown.classList.contains('hidden') || 
        userMenuBtn.contains(event.target)) {
        return;
    }
    
    if (!userDropdown.contains(event.target)) {
        userDropdown.classList.add('hidden');
    }
});

// Update auth UI based on user state
function updateAuthUI(isAuthenticated, userData = null) {
    if (isAuthenticated && userData) {
        authButtons.classList.add('hidden');
        userMenu.classList.remove('hidden');
        usernameDisplay.textContent = userData.username;
        if (userData.profilePicture) {
            userAvatar.src = userData.profilePicture;
        }
    } else {
        authButtons.classList.remove('hidden');
        userMenu.classList.add('hidden');
    }
}

// Show login page
function showLoginPage() {
    document.querySelectorAll('main > section').forEach(section => {
        section.classList.add('hidden');
    });
    authPages.classList.remove('hidden');
    loginPage.classList.remove('hidden');
    registerPage.classList.add('hidden');
    window.location.hash = 'login';
    if (loginForm) loginForm.reset();
}

// Show register page
function showRegisterPage() {
    document.querySelectorAll('main > section').forEach(section => {
        section.classList.add('hidden');
    });
    authPages.classList.remove('hidden');
    registerPage.classList.remove('hidden');
    loginPage.classList.add('hidden');
    window.location.hash = 'register';
    if (registerForm) registerForm.reset();
}

// Check if user is authenticated
export function isAuthenticated() {
    return sessionStorage.getItem('token') !== null;
}

// Get auth token
export async function getAuthToken() {
    if (sessionStorage.getItem('token')) {
        return sessionStorage.getItem('token');
    }
    try {
        const response = await fetch(`${API_BASE_URL}/auth/token`, {
            method: 'GET'
        });

        if (!response.ok) {
            sessionStorage.removeItem('token');
            return null;
        }

        const data = await response.json();
        return data.token;
    } catch (error) {
        console.error('Error getting token:', error);
        sessionStorage.removeItem('token');
        return null;
    }
}

// Set auth token
export function setAuthToken(token) {
    sessionStorage.setItem('token', token);
}

// Remove auth token
export function removeAuthToken() {
    sessionStorage.removeItem('token');
}

// Login user
export async function loginUser(email, password) {
    try {
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email, password })
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Login failed');
        }

        const data = await response.json();
        setAuthToken(data.token);
        return data;
    } catch (error) {
        console.error('Login error:', error);
        throw error;
    }
}

// Register user
export async function registerUser(email, password, username) {
    try {
        const response = await fetch(`${API_BASE_URL}/auth/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email, password, username })
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Registration failed');
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Registration error:', error);
        throw error;
    }
}

// Get current user
export async function getCurrentUser() {
    try {
        const token = await getAuthToken();
        if (!token) {
            throw new Error('No token found');
        }

        const response = await fetch(`${API_BASE_URL}/auth/me`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Failed to get user data');
        }

        return await response.json();
    } catch (error) {
        console.error('Get current user error:', error);
        throw error;
    }
}

// Logout user
export function logoutUser() {
    removeAuthToken();
    window.location.href = '/index.html';
}

// Add auth token to fetch requests
export async function fetchWithAuth(url, options = {}) {
    const token = sessionStorage.getItem('token');
    if (!token) {
        throw new Error('No token found');
    }

    const headers = {
        ...options.headers,
        'Authorization': `Bearer ${token}`
    };

    return fetch(url, {
        ...options,
        headers
    });
}

// Check auth state on page load
async function checkAuthState() {
    const token = await getAuthToken();
    if (!token) {
        updateAuthUI(false);
        return null;
    }

    try {
        showLoading();
        const userData = await getCurrentUser();
        hideLoading();
        
        if (userData) {
            updateAuthUI(true, userData);
            return userData;
        } else {
            removeAuthToken();
            updateAuthUI(false);
        }
    } catch (error) {
        hideLoading();
        console.error('Auth check failed:', error);
        removeAuthToken();
        updateAuthUI(false);
    }
    
    return null;
}

// Initialize auth state
checkAuthState();

